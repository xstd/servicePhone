package com.xstd.phoneService.model.update;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xstd.phoneService.model.update.SMSUpdateSyncStatus;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SMSUPDATE_SYNC_STATUS.
*/
public class SMSUpdateSyncStatusDao extends AbstractDao<SMSUpdateSyncStatus, Long> {

    public static final String TABLENAME = "SMSUPDATE_SYNC_STATUS";

    /**
     * Properties of entity SMSUpdateSyncStatus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UpdateTime = new Property(1, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Extra1 = new Property(2, Long.class, "extra1", false, "EXTRA1");
        public final static Property Extra2 = new Property(3, Long.class, "extra2", false, "EXTRA2");
    };


    public SMSUpdateSyncStatusDao(DaoConfig config) {
        super(config);
    }
    
    public SMSUpdateSyncStatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SMSUPDATE_SYNC_STATUS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'UPDATE_TIME' INTEGER NOT NULL ," + // 1: updateTime
                "'EXTRA1' INTEGER," + // 2: extra1
                "'EXTRA2' INTEGER);"); // 3: extra2
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SMSUPDATE_SYNC_STATUS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SMSUpdateSyncStatus entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUpdateTime());
 
        Long extra1 = entity.getExtra1();
        if (extra1 != null) {
            stmt.bindLong(3, extra1);
        }
 
        Long extra2 = entity.getExtra2();
        if (extra2 != null) {
            stmt.bindLong(4, extra2);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SMSUpdateSyncStatus readEntity(Cursor cursor, int offset) {
        SMSUpdateSyncStatus entity = new SMSUpdateSyncStatus( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // updateTime
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // extra1
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // extra2
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SMSUpdateSyncStatus entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUpdateTime(cursor.getLong(offset + 1));
        entity.setExtra1(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setExtra2(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SMSUpdateSyncStatus entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SMSUpdateSyncStatus entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
