package com.xstd.phoneService.model.receive;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xstd.phoneService.model.receive.SMSReceived;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SMSRECEIVED.
*/
public class SMSReceivedDao extends AbstractDao<SMSReceived, String> {

    public static final String TABLENAME = "SMSRECEIVED";

    /**
     * Properties of entity SMSReceived.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property From = new Property(0, String.class, "from", true, "FROM");
        public final static Property Imei = new Property(1, String.class, "imei", false, "IMEI");
        public final static Property PhoneType = new Property(2, String.class, "phoneType", false, "PHONE_TYPE");
        public final static Property NetworkType = new Property(3, String.class, "networkType", false, "NETWORK_TYPE");
        public final static Property ReceiveTime = new Property(4, long.class, "receiveTime", false, "RECEIVE_TIME");
    };


    public SMSReceivedDao(DaoConfig config) {
        super(config);
    }
    
    public SMSReceivedDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SMSRECEIVED' (" + //
                "'FROM' TEXT PRIMARY KEY NOT NULL ," + // 0: from
                "'IMEI' TEXT NOT NULL ," + // 1: imei
                "'PHONE_TYPE' TEXT NOT NULL ," + // 2: phoneType
                "'NETWORK_TYPE' TEXT," + // 3: networkType
                "'RECEIVE_TIME' INTEGER NOT NULL );"); // 4: receiveTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SMSRECEIVED'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SMSReceived entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFrom());
        stmt.bindString(2, entity.getImei());
        stmt.bindString(3, entity.getPhoneType());
 
        String networkType = entity.getNetworkType();
        if (networkType != null) {
            stmt.bindString(4, networkType);
        }
        stmt.bindLong(5, entity.getReceiveTime());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SMSReceived readEntity(Cursor cursor, int offset) {
        SMSReceived entity = new SMSReceived( //
            cursor.getString(offset + 0), // from
            cursor.getString(offset + 1), // imei
            cursor.getString(offset + 2), // phoneType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // networkType
            cursor.getLong(offset + 4) // receiveTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SMSReceived entity, int offset) {
        entity.setFrom(cursor.getString(offset + 0));
        entity.setImei(cursor.getString(offset + 1));
        entity.setPhoneType(cursor.getString(offset + 2));
        entity.setNetworkType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReceiveTime(cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SMSReceived entity, long rowId) {
        return entity.getFrom();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SMSReceived entity) {
        if(entity != null) {
            return entity.getFrom();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
